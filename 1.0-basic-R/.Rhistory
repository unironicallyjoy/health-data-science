# vectors and data types
weight_g <- c(50, 60, 65, 82)
animals
animals <- c("mouse", "rat", "dog")
animals
# vectors and data types
weight_g <- c(50, 60, 65, 82)
weight_g
animals <- c("mouse", "rat", "dog")
animals
# checking the lenght of a vector
lenght(weight_g)
# checking the length of a vector
length(weight_g)
length(animals)
class(weight_g)
class(animals)
# adding more elements to a vector
weight_g <- c(weight_g, 90) # add at the end
# adding more elements to a vector
weight_g <- c(weight_g, 90) # add at the end
weight_g
weight_g <- c(30, weight_g) # add at the beginning
weight_g
combine_logical <- c(num_logical, char_logical)
combine_logical
# challenge
num_char <- c(1, 2, 3, "a")
num_logical <- c(1, 2, 3, TRUE)
char_logical <- c("a", "b", "c", TRUE)
tricky <- c(1, 2, 3, "4")
combine_logical <- c(num_logical, char_logical)
combine_logical
class(num_char)
class(num_logical)
class(char_logical)
combine_logical <- c(num_logical, char_logical)
combine_logical
# sub-setting vectors
animals <- c("mouse", "rat", "dog", "cat")
animals[2]
animals <- [c(3, 2)]
animals[c(3, 2)]
more_animal <- animals[c(1, 2, 3, 2, 1, 3)]
more_animal
more_animal <- animals[c(1, 2, 3, 2, 1, 4)]
more_animal
# conditional subsetting
weight_g <- c(21, 34, 39, 54, 55)
weight_g[c(TRUE, FALSE, FALSE, TRUE, TRUE)]
weight_g > 50 # returns logicals
weight_g[weight_g > 50]
weight_g[weight_g > 30 & weight_g < 50]
weight_g[weight_g <= 30 | weight_g == 55]
animals <- c("mouse", "rat", "dog", "cat", "cat")
# return both rat and cat
animals[animals == "cat" | animals == "rat"]
# return a logical vector that is TRUE for the elements within animals
# that are found in the character vector and FALSE for those that are not
animals %in% c("rat", "cat", "dog", "duck", "goat", "bird", "fish")
# use the logical vector created by %in% to return elements from animals
# that are found in the character vector
animals[animals %in% c("rat", "cat", "dog", "duck", "goat", "bird", "fish")]
# Missing data are represented in vectors as NA
# na.rm = TRUE
heights <- c(2, 4, 4, NA, 6)
# Missing data are represented in vectors as NA
# na.rm = TRUE
heights <- c(2, 4, 4, NA, 6)
mean(heights)
max(heights)
mean(heights, na.rm = TRUE)
max(heights, na.rm = TRUE)
# functions is.na(), na.omit(), complete.cases()
## Extract those elements which are not missing values.
heights[!is.na(heights)]
## Returns the object with incomplete cases removed.
#The returned object is an atomic vector of type `"numeric"` (or #`"double"`).
na.omit(heights)
## Returns the object with incomplete cases removed.
#The returned object is an atomic vector of type `"numeric"` (or #`"double"`).
na.omit(heights)
## Extract those elements which are complete cases.
#The returned object is an atomic vector of type `"numeric"` (or #`"double"`).
heights[complete.cases(heights)]
# challenge
heights <- c(63, 69, 60, 65, NA, 68, 61, 70,
61, 59, 64, 69, 63, 63, NA, 72, 65, 64, 70, 63, 65)
heights_no_na[!is.na(heights)]
heights_no_na <- heights[!is.na(heights)]
heights_no_na
# download file from external source
download.file(url = "https://ndownloader.figshare.com/files/2292169",
destfile = "data/raw/portal_data_joined.csv")
# reading the data into R
## load the tidyverse packages, incl. dplyr
library(tidyverse)
urveys <- read_csv("data_raw/portal_data_joined.csv")
surveys <- read_csv("data_raw/portal_data_joined.csv")
setwd("C:/Users/USER/Documents/GitHub/health-data-science/1.0-basic-R")
# download file from external source
download.file(url = "https://ndownloader.figshare.com/files/2292169",
destfile = "data/raw/portal_data_joined.csv")
surveys <- read_csv("data_raw/portal_data_joined.csv")
surveys <- read_csv("data/raw/portal_data_joined.csv")
# head() - to see first few lines
head(surveys)
head(surveys, 10)
survey_sample <-  head(surveys, 10)
survey_sample
surveys <- read_csv("data/raw/portal_data_joined.csv")
# head() - to see first few lines
head(surveys)
survey_sample <-  head(surveys, 10)
survey_sample
# tail() - to see last few lines
tail(survey_sample)
tail(survey_sample, 3)
# view() -
view(surveys)
